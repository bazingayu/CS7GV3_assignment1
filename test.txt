#version 330

in vec3 vertex_position;
in vec3 vertex_normal;

out vec3 LightIntensity;

vec3 LightPosition = vec3 (5.0, 3.0, 0.0); // Light position in world coords.
vec3 lightColor = vec3(1.0, 1.0, 1.0);

uniform vec3 color;
uniform vec3 cameraPos;
uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform float shininess;

//ambient
float ambientStrength = 0.1;
vec3 ambient = ambientStrength*lightColor;

//diffuse
vec3 FragPos = vec3(model * vec4(vertex_position,1.0));
vec3 norm = normalize(mat3(transpose(inverse(model)))*vertex_normal);
vec3 lightDir = normalize(LightPosition-FragPos);
float diff = max(dot(norm,lightDir), 0.0);
vec3 diffuse = diff*lightColor;

//specular
float specularStrength = 1.0;
vec3 viewDir = normalize(cameraPos-FragPos);
vec3 reflectDir = reflect(-lightDir,norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
vec3 specular = specularStrength * spec * lightColor;

void main(){
    LightIntensity = (ambient + diffuse + specular) * color;
    // Convert position to clip coordinates and pass along
    gl_Position =  proj * view * model * vec4(vertex_position,1.0);
}