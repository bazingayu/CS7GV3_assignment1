#version 410

in vec3 n_eye;
in vec3 position_eye, normal_eye;

out vec4 frag_colour;
uniform mat4 view;

vec3  light_position_world = vec3(3.0, 0.0, 3.0);
vec3  SurfaceColor = vec3(1.0, 1.0, 1.0);
vec3  WarmColor = vec3(0.6, 0.6, 0.0);
vec3  CoolColor = vec3(0.0, 0.0, 0.6);
float DiffuseWarm = 0.45;
float DiffuseCool = 0.45;

float NdotL;
vec3  ReflectVec;
vec3  ViewVec;

void main()
{
    vec3 light_position_eye = vec3 (view * vec4 (light_position_world, 1.0));
    vec3 lightVec   = normalize(light_position_eye - position_eye);
    vec3 distance_to_light_eye = light_position_eye - position_eye;
    vec3 direction_to_light_eye = normalize (distance_to_light_eye);
    vec3 ReflectVec      = normalize(reflect(-direction_to_light_eye, normal_eye));
    vec3 ViewVec         = normalize(-position_eye);
    float NdotL           = (dot(lightVec, normal_eye) + 1.0) * 0.5;
    vec3 kcool    = min(CoolColor + DiffuseCool * SurfaceColor, 1.0);
    vec3 kwarm    = min(WarmColor + DiffuseWarm * SurfaceColor, 1.0);
    vec3 kfinal   = mix(kcool, kwarm, NdotL);

    vec3 nreflect = normalize(ReflectVec);
    vec3 nview    = normalize(ViewVec);

    float spec    = max(dot(nreflect, nview), 0.0);
    spec          = pow(spec, 32.0);

    frag_colour = vec4(min(kfinal + spec, 1.0), 1.0);
    //frag_colour = vec4(min(kfinal, 1.0), 1.0);
}

